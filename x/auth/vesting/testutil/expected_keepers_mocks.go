// Code generated by MockGen. DO NOT EDIT.
// Source: x/auth/vesting/types/expected_keepers.go

// Package mock_types is a generated GoMock package.
package mock_types

import (
	reflect "reflect"

	math "cosmossdk.io/math"
	log "github.com/cometbft/cometbft/libs/log"
	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/cosmos/cosmos-sdk/x/staking/types"
	"github.com/golang/mock/gomock"
)

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// BlockedAddr mocks base method.
func (m *MockBankKeeper) BlockedAddr(addr types.AccAddress) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockedAddr", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// BlockedAddr indicates an expected call of BlockedAddr.
func (mr *MockBankKeeperMockRecorder) BlockedAddr(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockedAddr", reflect.TypeOf((*MockBankKeeper)(nil).BlockedAddr), addr)
}

// IsSendEnabledCoins mocks base method.
func (m *MockBankKeeper) IsSendEnabledCoins(ctx types.Context, coins ...types.Coin) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range coins {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsSendEnabledCoins", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsSendEnabledCoins indicates an expected call of IsSendEnabledCoins.
func (mr *MockBankKeeperMockRecorder) IsSendEnabledCoins(ctx interface{}, coins ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, coins...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSendEnabledCoins", reflect.TypeOf((*MockBankKeeper)(nil).IsSendEnabledCoins), varargs...)
}

// SendCoins mocks base method.
func (m *MockBankKeeper) SendCoins(ctx types.Context, fromAddr, toAddr types.AccAddress, amt types.Coins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", ctx, fromAddr, toAddr, amt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockBankKeeperMockRecorder) SendCoins(ctx, fromAddr, toAddr, amt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockBankKeeper)(nil).SendCoins), ctx, fromAddr, toAddr, amt)
}

// MockDistrKeeper is a mock of DistrKeeper interface.
type MockDistrKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockDistrKeeperMockRecorder
}

// MockDistrKeeperMockRecorder is the mock recorder for MockDistrKeeper.
type MockDistrKeeperMockRecorder struct {
	mock *MockDistrKeeper
}

// NewMockDistrKeeper creates a new mock instance.
func NewMockDistrKeeper(ctrl *gomock.Controller) *MockDistrKeeper {
	mock := &MockDistrKeeper{ctrl: ctrl}
	mock.recorder = &MockDistrKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistrKeeper) EXPECT() *MockDistrKeeperMockRecorder {
	return m.recorder
}

// FundCommunityPool mocks base method.
func (m *MockDistrKeeper) FundCommunityPool(ctx types.Context, amount types.Coins, sender types.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FundCommunityPool", ctx, amount, sender)
	ret0, _ := ret[0].(error)
	return ret0
}

// FundCommunityPool indicates an expected call of FundCommunityPool.
func (mr *MockDistrKeeperMockRecorder) FundCommunityPool(ctx, amount, sender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FundCommunityPool", reflect.TypeOf((*MockDistrKeeper)(nil).FundCommunityPool), ctx, amount, sender)
}

// GetAuthority mocks base method.
func (m *MockDistrKeeper) GetAuthority() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthority")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthority indicates an expected call of GetAuthority.
func (mr *MockDistrKeeperMockRecorder) GetAuthority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthority", reflect.TypeOf((*MockDistrKeeper)(nil).GetAuthority))
}

// GetTotalRewards mocks base method.
func (m *MockDistrKeeper) GetTotalRewards(ctx types.Context) types.DecCoins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalRewards", ctx)
	ret0, _ := ret[0].(types.DecCoins)
	return ret0
}

// GetTotalRewards indicates an expected call of GetTotalRewards.
func (mr *MockDistrKeeperMockRecorder) GetTotalRewards(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalRewards", reflect.TypeOf((*MockDistrKeeper)(nil).GetTotalRewards), ctx)
}

// Logger mocks base method.
func (m *MockDistrKeeper) Logger(ctx types.Context) log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger", ctx)
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockDistrKeeperMockRecorder) Logger(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockDistrKeeper)(nil).Logger), ctx)
}

// SetWithdrawAddr mocks base method.
func (m *MockDistrKeeper) SetWithdrawAddr(ctx types.Context, delegatorAddr, withdrawAddr types.AccAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithdrawAddr", ctx, delegatorAddr, withdrawAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithdrawAddr indicates an expected call of SetWithdrawAddr.
func (mr *MockDistrKeeperMockRecorder) SetWithdrawAddr(ctx, delegatorAddr, withdrawAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithdrawAddr", reflect.TypeOf((*MockDistrKeeper)(nil).SetWithdrawAddr), ctx, delegatorAddr, withdrawAddr)
}

// WithdrawDelegationRewards mocks base method.
func (m *MockDistrKeeper) WithdrawDelegationRewards(ctx types.Context, delAddr types.AccAddress, valAddr types.ValAddress) (types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawDelegationRewards", ctx, delAddr, valAddr)
	ret0, _ := ret[0].(types.Coins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawDelegationRewards indicates an expected call of WithdrawDelegationRewards.
func (mr *MockDistrKeeperMockRecorder) WithdrawDelegationRewards(ctx, delAddr, valAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawDelegationRewards", reflect.TypeOf((*MockDistrKeeper)(nil).WithdrawDelegationRewards), ctx, delAddr, valAddr)
}

// WithdrawValidatorCommission mocks base method.
func (m *MockDistrKeeper) WithdrawValidatorCommission(ctx types.Context, valAddr types.ValAddress) (types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawValidatorCommission", ctx, valAddr)
	ret0, _ := ret[0].(types.Coins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawValidatorCommission indicates an expected call of WithdrawValidatorCommission.
func (mr *MockDistrKeeperMockRecorder) WithdrawValidatorCommission(ctx, valAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawValidatorCommission", reflect.TypeOf((*MockDistrKeeper)(nil).WithdrawValidatorCommission), ctx, valAddr)
}

// MockStakingKeeper is a mock of StakingKeeper interface.
type MockStakingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockStakingKeeperMockRecorder
}

// MockStakingKeeperMockRecorder is the mock recorder for MockStakingKeeper.
type MockStakingKeeperMockRecorder struct {
	mock *MockStakingKeeper
}

// NewMockStakingKeeper creates a new mock instance.
func NewMockStakingKeeper(ctrl *gomock.Controller) *MockStakingKeeper {
	mock := &MockStakingKeeper{ctrl: ctrl}
	mock.recorder = &MockStakingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakingKeeper) EXPECT() *MockStakingKeeperMockRecorder {
	return m.recorder
}

// GetDelegatorDelegations mocks base method.
func (m *MockStakingKeeper) GetDelegatorDelegations(ctx types.Context, delegator types.AccAddress, maxRetrieve uint16) []types0.Delegation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegatorDelegations", ctx, delegator, maxRetrieve)
	ret0, _ := ret[0].([]types0.Delegation)
	return ret0
}

// GetDelegatorDelegations indicates an expected call of GetDelegatorDelegations.
func (mr *MockStakingKeeperMockRecorder) GetDelegatorDelegations(ctx, delegator, maxRetrieve interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatorDelegations", reflect.TypeOf((*MockStakingKeeper)(nil).GetDelegatorDelegations), ctx, delegator, maxRetrieve)
}

// GetRedelegations mocks base method.
func (m *MockStakingKeeper) GetRedelegations(ctx types.Context, delegator types.AccAddress, maxRetrieve uint16) []types0.Redelegation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedelegations", ctx, delegator, maxRetrieve)
	ret0, _ := ret[0].([]types0.Redelegation)
	return ret0
}

// GetRedelegations indicates an expected call of GetRedelegations.
func (mr *MockStakingKeeperMockRecorder) GetRedelegations(ctx, delegator, maxRetrieve interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedelegations", reflect.TypeOf((*MockStakingKeeper)(nil).GetRedelegations), ctx, delegator, maxRetrieve)
}

// GetUnbondingDelegations mocks base method.
func (m *MockStakingKeeper) GetUnbondingDelegations(ctx types.Context, delegator types.AccAddress, maxRetrieve uint16) []types0.UnbondingDelegation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnbondingDelegations", ctx, delegator, maxRetrieve)
	ret0, _ := ret[0].([]types0.UnbondingDelegation)
	return ret0
}

// GetUnbondingDelegations indicates an expected call of GetUnbondingDelegations.
func (mr *MockStakingKeeperMockRecorder) GetUnbondingDelegations(ctx, delegator, maxRetrieve interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnbondingDelegations", reflect.TypeOf((*MockStakingKeeper)(nil).GetUnbondingDelegations), ctx, delegator, maxRetrieve)
}

// GetValidator mocks base method.
func (m *MockStakingKeeper) GetValidator(ctx types.Context, addr types.ValAddress) (types0.Validator, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidator", ctx, addr)
	ret0, _ := ret[0].(types0.Validator)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetValidator indicates an expected call of GetValidator.
func (mr *MockStakingKeeperMockRecorder) GetValidator(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*MockStakingKeeper)(nil).GetValidator), ctx, addr)
}

// RemoveDelegation mocks base method.
func (m *MockStakingKeeper) RemoveDelegation(ctx types.Context, delegation types0.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDelegation", ctx, delegation)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDelegation indicates an expected call of RemoveDelegation.
func (mr *MockStakingKeeperMockRecorder) RemoveDelegation(ctx, delegation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDelegation", reflect.TypeOf((*MockStakingKeeper)(nil).RemoveDelegation), ctx, delegation)
}

// RemoveValidatorTokensAndShares mocks base method.
func (m *MockStakingKeeper) RemoveValidatorTokensAndShares(ctx types.Context, validator types0.Validator, sharesToRemove types.Dec) (types0.Validator, math.Int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveValidatorTokensAndShares", ctx, validator, sharesToRemove)
	ret0, _ := ret[0].(types0.Validator)
	ret1, _ := ret[1].(math.Int)
	return ret0, ret1
}

// RemoveValidatorTokensAndShares indicates an expected call of RemoveValidatorTokensAndShares.
func (mr *MockStakingKeeperMockRecorder) RemoveValidatorTokensAndShares(ctx, validator, sharesToRemove interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveValidatorTokensAndShares", reflect.TypeOf((*MockStakingKeeper)(nil).RemoveValidatorTokensAndShares), ctx, validator, sharesToRemove)
}
